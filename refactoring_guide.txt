# Gym App Refactoring Guide  
Optimized for reliable AI collaboration ("vibecoding") while preserving existing behaviour.

---

## 1. Repository Blueprint

### 1.1 Current High-Level Layout (2025-07-01)
```
app/
  src/
    assets/              # static images & svg
    bll/                 # business-logic helpers (WorkoutPlan, etc.)
    components/          # Vue SFCs (Human.vue 700+ lines ðŸ‘Ž)
    config/              # runtime configuration
    dal/                 # plain data models (Exercise, Muscle)
    repositories/        # thin wrappers over DAL
    router/              # vue-router setup
    services/            # API abstractions
    main.ts              # app bootstrap
```

### 1.2 Target Structure (DDD-inspired, AI-friendly)
```
app/
  src/
    â”œâ”€â”€ api/                  # typed API clients & adapters
    â”œâ”€â”€ common/               # reusable pure utils (rgb, math, etc.)
    â”œâ”€â”€ core/                 # enterprise entities & value-objects
    â”‚     â”œâ”€â”€ exercise/
    â”‚     â”œâ”€â”€ muscle/
    â”‚     â””â”€â”€ workout/
    â”œâ”€â”€ features/             # vertical slices = UI + state + logic
    â”‚     â”œâ”€â”€ planner/        # workout planner screens
    â”‚     â””â”€â”€ anatomy-viewer/ # <Human> split into focused pieces
    â”œâ”€â”€ router/               # kept flat
    â”œâ”€â”€ stores/               # pinia modules or vue-x equivalent
    â”œâ”€â”€ ui/                   # presentational components only
    â””â”€â”€ index.ts / main.ts
```
Rationale: clear, bounded contexts aid LLM comprehension & testability.

---

## 2. Key Weaknesses

### 2.1 Critical Tech Debt Blocking Vibecoding
â€¢ **Monolithic components** â€“ e.g. `Human.vue` (â‰ˆ750 lines, heavy SVG, mixed concerns).  
â€¢ **Mixed composition & options API** â€“ inconsistent patterns confuse the model.  
â€¢ **Scattered state management** â€“ direct store access inside components without typed faÃ§ades.  
â€¢ **`any` & implicit types** â€“ reduces type inference; harms AI-powered refactors.  
â€¢ **Tight coupling between SVG IDs & muscle names** â€“ string mapping buried in component.

### 2.2 Fragility Points in Visualization Pipeline
â€¢ Manual DOM access (`document.getElementById`) instead of Vue refs.  
â€¢ CSS tint logic lives in BLL but mutates DOM classes â€“ violates separation.  
â€¢ SVG paths hard-coded; changes break click-handlers silently.  
â€¢ Magic numbers for animation timings (e.g. `750ms`).

---

## 3. Strategic Refactor Plan

1. **Component Extraction**  
   Split `Human.vue` into:
   - `AnatomySvg.vue` (pure SVG, no business logic)
   - `MuscleHighlight.ts` composable (gets reactive muscle volumes, returns computed tint)
   - `MuscleClickOverlay.vue` (handles click â†’ emits "muscle-selected")

2. **Typed Domain Layer**  
   Move DAL classes (`Exercise`, `Muscle`) to `core/` and convert to `interface`/`class` with readonly fields + factory methods. Ensure zero Vue imports.

3. **Pinia Store Normalisation**  
   Create feature-scoped stores (`useExerciseStore`) with explicit actions & typed payloads. Avoid cross-store writes.

4. **Remove Direct DOM Manipulation**  
   Replace `document.getElementById` with template refs & `v-bind:class`.

5. **Strict TypeScript**  
   Enable `"strict": true` in `tsconfig`, forbid `any`, add ESLint rule set (`typescript-eslint/strict-boolean-expressions`).

6. **Consistent Composition API**  
   Adopt `<script setup>` everywhere; deprecate Options API components.

7. **Utility Isolation**  
   Move helpers like `RgbHexHelper` & `CSSHelper` to `common/` and ensure pure, side-effect-free functions.

8. **Documentation & AI Context**  
   Add `JSDoc` to every exported symbol. Preface complex files with a 3-line "AI-primer" comment summarising intent & invariants.

---

## 4. Type Safety & Code Quality Enhancements
- Add `vue-tsc --noEmit` to CI to guarantee template type checking.
- Enforce exhaustive switch matching for enum-like unions (`EDailyTips`).
- Introduce `zod` schemas for API payload validation.
- Adopt **Prettier + ESLint** unified config already present; extend with `plugin:vue/vue3-recommended`.

---

## 5. State Management & Reactivity Guidelines
- Ui components consume **readonly** props; stateful logic relegated to stores/composables.
- No store mutation outside *actions*.
- Complex derived data via `computed` inside composables, not inside components.
- Prefer `toRef`/`toRefs` to avoid implicit reactivity unwrap.

---

## 6. Component Architecture Rules
| Rule | Rationale |
|------|-----------|
| Max 200 LOC/SFC | Keeps context window small for LLMs |
| One responsibility per component | Aids tree-shaking and testing |
| Pure presentational components under `ui/` | Allows Storybook docs & snapshot tests |
| Event emitters over store writes | Decouples child â†” parent |

---

## 7. Documentation & AI Context Strategy
1. **`README.md` update**: include high-level domain glossary (Muscle, Exercise, Volume).
2. **Architecture Decision Records (ADR)**: short markdown files in `/docs/adr/`.
3. **Per-feature `index.ts` barrels**: expose public API; add top-comment summarising usage so GPT can reason on entry points.
4. **`DOCS_MODE=true` build**: generate typedoc-style docs for core layer.

---

## 8. Progressive Adoption Roadmap
| Phase | Scope | Deliverable |
|-------|-------|-------------|
| 0 | Tooling | Add strict TS, lint rules, CI check **DONE 2025-07-01** |
| 1 | Anatomy Viewer | Extract & modularise `Human.vue` **DONE 2025-07-05** |
| 2 | Domain Core | Move DAL to core/, add unit tests **DONE 2025-07-05** |
| 3 | Stores | Normalise pinia, remove implicit mutations **DONE 2025-07-05** |
| 4 | Documentation | ADRs, AI primers, Storybook stories |
| 5 | Normalization | Remove code that is, after refactoring, no longer used **DONE 2025-07-05** |

Each phase should keep functional parity & ship under feature flags if needed.

---

## 9. Definition of Done
- All tests & visual snapshots green.
- `vue-tsc`, ESLint, Prettier pass with zero warnings.
- `npm run analyze` shows â‰¤10% bundle size increase.
- No TODO/FIXME left in touched files.
- ADR recorded for every architectural change.

---

**End of Guide â€“ happy vibecoding!**
